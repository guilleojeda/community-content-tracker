/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for community content
         * @description Performs semantic search using Amazon Bedrock embeddings to find relevant
         *     AWS community content. Supports filtering by content type, badges, tags,
         *     and date ranges.
         *
         */
        get: operations["searchContent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get platform statistics
         * @description Returns aggregate statistics about the platform including contributor count, content pieces, and activity metrics
         */
        get: operations["getPlatformStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user
         * @description Creates a new user account with AWS Cognito and the application database
         */
        post: operations["registerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login user
         * @description Authenticates user credentials and returns JWT tokens
         */
        post: operations["loginUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify email address
         * @description Verifies user email with confirmation code sent during registration
         */
        post: operations["verifyEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh access token
         * @description Obtains new access and ID tokens using a refresh token
         */
        post: operations["refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request password reset
         * @description Sends a password reset confirmation code to the user's email
         */
        post: operations["forgotPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset password with confirmation code
         * @description Resets user password using the confirmation code from email
         */
        post: operations["resetPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description Type of content
         * @enum {string}
         */
        ContentType: "blog" | "youtube" | "github" | "conference_talk" | "podcast";
        /**
         * @description AWS community badge type
         * @enum {string}
         */
        BadgeType: "community_builder" | "hero" | "ambassador" | "user_group_leader";
        /**
         * @description Content visibility level
         * @enum {string}
         */
        Visibility: "private" | "aws_only" | "aws_community" | "public";
        SearchResponse: {
            results: components["schemas"]["ContentSearchResult"][];
            /** @description Total number of results matching the query */
            total: number;
            /** @description Maximum results per page */
            limit: number;
            /** @description Number of results skipped */
            offset: number;
        };
        ContentSearchResult: {
            /** Format: uuid */
            id: string;
            title: string;
            description?: string | null;
            contentType: components["schemas"]["ContentType"];
            visibility: components["schemas"]["Visibility"];
            /** Format: date-time */
            publishDate?: string | null;
            /** Format: date-time */
            captureDate: string;
            tags: string[];
            isClaimed: boolean;
            originalAuthor?: string | null;
            urls: components["schemas"]["ContentUrl"][];
            author?: components["schemas"]["ContentAuthor"];
            /**
             * Format: float
             * @description Relevance score (0-1)
             */
            score?: number;
        };
        ContentUrl: {
            id: string;
            /** Format: uri */
            url: string;
        };
        ContentAuthor: {
            username: string;
            profileSlug: string;
            badges?: components["schemas"]["BadgeType"][];
        };
        PlatformStats: {
            /** @description Total number of active contributors */
            contributors: number;
            /** @description Total number of content pieces */
            contentPieces: number;
            /** @description Content added in last 24 hours */
            dailyContent: number;
            /** @description Users created in last 7 days */
            weeklyActiveUsers: number;
            /** @description Platform uptime */
            uptime: string;
            /**
             * Format: date-time
             * @description Timestamp of last stats update
             */
            lastUpdated: string;
        };
        RegisterRequest: {
            /** Format: email */
            email: string;
            /**
             * Format: password
             * @description Must contain uppercase, lowercase, numbers, and symbols
             */
            password: string;
            /** @description Alphanumeric, hyphens, and underscores only */
            username: string;
        };
        RegisterResponse: {
            /** Format: uuid */
            userId: string;
            message: string;
        };
        LoginRequest: {
            /** Format: email */
            email: string;
            /** Format: password */
            password: string;
        };
        LoginResponse: {
            /** @description JWT access token for API authentication */
            accessToken: string;
            /** @description JWT ID token containing user information */
            idToken: string;
            /** @description Token for refreshing access/ID tokens */
            refreshToken: string;
            /** @description Token expiration time in seconds */
            expiresIn: number;
            user: components["schemas"]["UserProfile"];
        };
        UserProfile: {
            /** Format: uuid */
            id: string;
            /** Format: email */
            email: string;
            username: string;
            profileSlug: string;
            isAdmin: boolean;
            isAwsEmployee: boolean;
        };
        VerifyEmailRequest: {
            /** Format: email */
            email: string;
            /** @description 6-digit confirmation code from email */
            confirmationCode: string;
        };
        VerifyEmailResponse: {
            message: string;
            verified: boolean;
        };
        RefreshTokenRequest: {
            refreshToken: string;
        };
        RefreshTokenResponse: {
            accessToken: string;
            idToken: string;
            expiresIn: number;
        };
        ErrorResponse: {
            error: {
                /** @description Machine-readable error code */
                code: string;
                /** @description Human-readable error message */
                message: string;
                /** @description Additional error context */
                details?: {
                    [key: string]: unknown;
                };
            };
        };
    };
    responses: {
        /** @description Validation error */
        ValidationError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": {
                 *         "code": "VALIDATION_ERROR",
                 *         "message": "Validation failed",
                 *         "details": {
                 *           "fields": {
                 *             "email": "Invalid email format"
                 *           }
                 *         }
                 *       }
                 *     } */
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Internal server error */
        InternalError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": {
                 *         "code": "INTERNAL_ERROR",
                 *         "message": "An unexpected error occurred"
                 *       }
                 *     } */
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    searchContent: {
        parameters: {
            query: {
                /**
                 * @description Search query string
                 * @example lambda performance optimization
                 */
                q: string;
                /**
                 * @description Maximum number of results to return
                 * @example 20
                 */
                limit?: number;
                /**
                 * @description Number of results to skip for pagination
                 * @example 0
                 */
                offset?: number;
                /**
                 * @description Filter by content types (comma-separated)
                 * @example blog,youtube
                 */
                type?: string;
                /**
                 * @description Filter by tags (comma-separated)
                 * @example serverless,containers
                 */
                tags?: string;
                /**
                 * @description Filter by contributor badges (comma-separated)
                 * @example hero,community_builder
                 */
                badges?: string;
                /**
                 * @description Start date for date range filter (ISO 8601)
                 * @example 2024-01-01
                 */
                startDate?: string;
                /**
                 * @description End date for date range filter (ISO 8601)
                 * @example 2024-12-31
                 */
                endDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "results": [
                     *         {
                     *           "id": "123e4567-e89b-12d3-a456-426614174000",
                     *           "title": "Optimizing Lambda Cold Starts",
                     *           "description": "A comprehensive guide to reducing Lambda cold starts",
                     *           "contentType": "blog",
                     *           "visibility": "public",
                     *           "publishDate": "2024-09-15T00:00:00Z",
                     *           "captureDate": "2024-09-16T10:30:00Z",
                     *           "tags": [
                     *             "serverless",
                     *             "lambda",
                     *             "performance"
                     *           ],
                     *           "isClaimed": true,
                     *           "urls": [
                     *             {
                     *               "id": "url-123",
                     *               "url": "https://example.com/blog/lambda-optimization"
                     *             }
                     *           ],
                     *           "author": {
                     *             "username": "johndoe",
                     *             "profileSlug": "johndoe",
                     *             "badges": [
                     *               "hero"
                     *             ]
                     *           },
                     *           "score": 0.95
                     *         }
                     *       ],
                     *       "total": 42,
                     *       "limit": 10,
                     *       "offset": 0
                     *     } */
                    "application/json": components["schemas"]["SearchResponse"];
                };
            };
            400: components["responses"]["ValidationError"];
            500: components["responses"]["InternalError"];
        };
    };
    getPlatformStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Platform statistics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "contributors": 5000,
                     *       "contentPieces": 50000,
                     *       "dailyContent": 100,
                     *       "weeklyActiveUsers": 1000,
                     *       "uptime": "24/7",
                     *       "lastUpdated": "2024-10-03T12:00:00Z"
                     *     } */
                    "application/json": components["schemas"]["PlatformStats"];
                };
            };
            500: components["responses"]["InternalError"];
        };
    };
    registerUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "user@example.com",
                 *       "password": "SecurePass123!@#",
                 *       "username": "johndoe"
                 *     } */
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            /** @description User successfully registered */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "userId": "123e4567-e89b-12d3-a456-426614174000",
                     *       "message": "Please check your email to verify your account"
                     *     } */
                    "application/json": components["schemas"]["RegisterResponse"];
                };
            };
            400: components["responses"]["ValidationError"];
            /** @description User already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "DUPLICATE_RESOURCE",
                     *         "message": "User already exists - email: Email already registered"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            500: components["responses"]["InternalError"];
        };
    };
    loginUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "user@example.com",
                 *       "password": "SecurePass123!@#"
                 *     } */
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Successfully authenticated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                     *       "idToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                     *       "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                     *       "expiresIn": 3600,
                     *       "user": {
                     *         "id": "123e4567-e89b-12d3-a456-426614174000",
                     *         "email": "user@example.com",
                     *         "username": "johndoe",
                     *         "profileSlug": "johndoe",
                     *         "isAdmin": false,
                     *         "isAwsEmployee": false
                     *       }
                     *     } */
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            400: components["responses"]["ValidationError"];
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "AUTH_INVALID",
                     *         "message": "Invalid email or password"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            500: components["responses"]["InternalError"];
        };
    };
    verifyEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "user@example.com",
                 *       "confirmationCode": "123456"
                 *     } */
                "application/json": components["schemas"]["VerifyEmailRequest"];
            };
        };
        responses: {
            /** @description Email successfully verified */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Email verified successfully",
                     *       "verified": true
                     *     } */
                    "application/json": components["schemas"]["VerifyEmailResponse"];
                };
            };
            400: components["responses"]["ValidationError"];
            500: components["responses"]["InternalError"];
        };
    };
    refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                 *     } */
                "application/json": components["schemas"]["RefreshTokenRequest"];
            };
        };
        responses: {
            /** @description Tokens successfully refreshed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                     *       "idToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                     *       "expiresIn": 3600
                     *     } */
                    "application/json": components["schemas"]["RefreshTokenResponse"];
                };
            };
            400: components["responses"]["ValidationError"];
            /** @description Invalid refresh token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "error": {
                     *         "code": "AUTH_INVALID",
                     *         "message": "Invalid or expired refresh token"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            500: components["responses"]["InternalError"];
        };
    };
    forgotPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "user@example.com"
                 *     } */
                "application/json": {
                    /**
                     * Format: email
                     * @description Email address of the account
                     */
                    email: string;
                };
            };
        };
        responses: {
            /** @description Password reset code sent */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Password reset code sent to email"
                     *     } */
                    "application/json": {
                        message?: string;
                    };
                };
            };
            400: components["responses"]["ValidationError"];
            500: components["responses"]["InternalError"];
        };
    };
    resetPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "user@example.com",
                 *       "confirmationCode": "123456",
                 *       "newPassword": "NewSecurePass123!@#"
                 *     } */
                "application/json": {
                    /**
                     * Format: email
                     * @description Email address of the account
                     */
                    email: string;
                    /** @description 6-digit confirmation code from email */
                    confirmationCode: string;
                    /**
                     * Format: password
                     * @description New password (min 12 characters)
                     */
                    newPassword: string;
                };
            };
        };
        responses: {
            /** @description Password successfully reset */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Password reset successful"
                     *     } */
                    "application/json": {
                        message?: string;
                    };
                };
            };
            400: components["responses"]["ValidationError"];
            500: components["responses"]["InternalError"];
        };
    };
}

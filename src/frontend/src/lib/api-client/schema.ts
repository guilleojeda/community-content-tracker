/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for content
         * @description Search for community content using semantic and keyword search.
         *     Supports filtering by content type, tags, badges, and date range.
         *     Returns public content for anonymous users, additional content for authenticated users.
         *
         */
        get: operations["searchContent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get platform statistics
         * @description Returns aggregated statistics about the platform
         */
        get: operations["getStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SearchResponse: {
            items: components["schemas"]["Content"][];
            /**
             * @description Total number of results matching the query
             * @example 245
             */
            total: number;
            /**
             * @description Number of results returned in this response
             * @example 10
             */
            limit: number;
            /**
             * @description Pagination offset
             * @example 0
             */
            offset: number;
        };
        Content: {
            /**
             * Format: uuid
             * @description Unique content identifier
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id: string;
            /**
             * Format: uuid
             * @description User who created/owns the content
             * @example 660e8400-e29b-41d4-a716-446655440000
             */
            userId: string;
            /**
             * @description Content title
             * @example Building Serverless APIs with AWS Lambda
             */
            title: string;
            /**
             * @description Content description
             * @example Learn how to build scalable serverless APIs using AWS Lambda and API Gateway
             */
            description?: string | null;
            /**
             * @description Type of content
             * @enum {string}
             */
            contentType: "blog" | "youtube" | "github" | "conference_talk" | "podcast" | "social" | "whitepaper" | "tutorial" | "workshop" | "book";
            /**
             * @description Visibility level of the content
             * @enum {string}
             */
            visibility: "public" | "aws_community" | "aws_only" | "private";
            /**
             * Format: date-time
             * @description Original publication date
             */
            publishDate?: string | null;
            /**
             * Format: date-time
             * @description Date the content was captured by our system
             */
            captureDate?: string;
            /** @description Engagement metrics */
            metrics?: {
                [key: string]: unknown;
            };
            /**
             * @description Tags associated with the content
             * @example [
             *       "serverless",
             *       "lambda",
             *       "api-gateway",
             *       "aws"
             *     ]
             */
            tags: string[];
            /** @description Whether the content has been claimed by its author */
            isClaimed?: boolean;
            /** @description Original author if different from user */
            originalAuthor?: string | null;
            /** @description URLs associated with the content */
            urls: {
                id?: string;
                /** Format: uri */
                url?: string;
            }[];
            /**
             * Format: date-time
             * @description Timestamp when content was added to the system
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Timestamp when content was last updated
             */
            updatedAt: string;
        };
        PlatformStats: {
            /**
             * @description Total number of contributors
             * @example 5000
             */
            contributors?: number;
            /**
             * @description Total number of content pieces
             * @example 50000
             */
            contentPieces?: number;
            /**
             * @description Average daily content additions
             * @example 100
             */
            dailyContent?: number;
            /**
             * @description Weekly active users
             * @example 1000
             */
            weeklyActiveUsers?: number;
        };
        Error: {
            error: {
                /**
                 * @description Machine-readable error code
                 * @example VALIDATION_ERROR
                 * @enum {string}
                 */
                code: "VALIDATION_ERROR" | "AUTHENTICATION_ERROR" | "AUTHORIZATION_ERROR" | "NOT_FOUND" | "CONFLICT" | "RATE_LIMIT_EXCEEDED" | "INTERNAL_ERROR";
                /**
                 * @description Human-readable error message
                 * @example Missing required query parameter: q
                 */
                message: string;
                /**
                 * @description Field that caused the error (if applicable)
                 * @example q
                 */
                field?: string;
                /** @description Additional error details */
                details?: {
                    [key: string]: unknown;
                };
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    searchContent: {
        parameters: {
            query: {
                /** @description Search query string */
                q: string;
                /** @description Number of results to return (max 100) */
                limit?: number;
                /** @description Pagination offset */
                offset?: number;
                /** @description Filter by content types (comma-separated) */
                type?: string;
                /** @description Filter by tags (comma-separated) */
                tags?: string;
                /** @description Filter by AWS program badges (comma-separated) */
                badges?: string;
                /** @description Start date for date range filter (ISO 8601) */
                startDate?: string;
                /** @description End date for date range filter (ISO 8601) */
                endDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful search response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Platform statistics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlatformStats"];
                };
            };
        };
    };
}

name: Deploy to Development

on:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - "LICENSE"
      - "docs/**"

concurrency:
  group: deploy-dev
  cancel-in-progress: false

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'
  ENVIRONMENT: 'dev'
  S3_BUCKET: ${{ secrets.DEV_ARTIFACTS_BUCKET }}

jobs:
  pre-deploy:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
      commit-sha: ${{ github.sha }}
      deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for deployable changes
        id: changes
        run: |
          # Check if there are changes that require deployment
          changed_files=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $changed_files"
          
          # Skip deployment if only docs/config changes
          if echo "$changed_files" | grep -E '\.(js|ts|tsx|json|yml|yaml)$|src/|package\.json|package-lock\.json' > /dev/null; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Deployable changes detected"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "⏭️ No deployable changes, skipping deployment"
          fi

      - name: Create GitHub deployment
        id: create-deployment
        if: steps.changes.outputs.should-deploy == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'dev',
              description: `Deploy ${context.sha.substring(0, 7)} to development`,
              auto_merge: false,
              required_contexts: []
            });
            
            console.log('Deployment created:', deployment.data.id);
            return deployment.data.id;

      - name: Set deployment status to pending
        if: steps.changes.outputs.should-deploy == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create-deployment.outputs.result }},
              state: 'pending',
              description: 'Deployment started',
              environment_url: `https://dev.aws-community-hub.com`
            });

  build-and-test:
    name: Build & Test for Deployment
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: needs.pre-deploy.outputs.should-deploy == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: dev_test_password
          POSTGRES_USER: dev_test_user
          POSTGRES_DB: dev_test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test -- --coverage --ci --watchAll=false --passWithNoTests
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://dev_test_user:dev_test_password@localhost:5432/dev_test_db

      - name: Build applications
        run: npm run build

      - name: CDK synth infrastructure
        run: |
          cd src/infrastructure
          npm run build
          npx cdk synth --all
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
          CDK_DEPLOY_ACCOUNT: ${{ secrets.DEV_AWS_ACCOUNT_ID }}

      - name: Archive build artifacts
        run: |
          mkdir -p artifacts
          tar -czf artifacts/backend-${{ needs.pre-deploy.outputs.commit-sha }}.tar.gz -C src/backend dist
          tar -czf artifacts/frontend-${{ needs.pre-deploy.outputs.commit-sha }}.tar.gz -C src/frontend .next
          tar -czf artifacts/infrastructure-${{ needs.pre-deploy.outputs.commit-sha }}.tar.gz -C src/infrastructure cdk.out

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload build artifacts to S3
        run: |
          aws s3 cp artifacts/ s3://${{ env.S3_BUCKET }}/builds/${{ needs.pre-deploy.outputs.commit-sha }}/ --recursive
          
          # Create latest symlink
          aws s3 cp s3://${{ env.S3_BUCKET }}/builds/${{ needs.pre-deploy.outputs.commit-sha }}/ s3://${{ env.S3_BUCKET }}/builds/latest/ --recursive

      - name: Cache build for deployment
        uses: actions/cache@v3
        with:
          path: |
            src/backend/dist
            src/frontend/.next
            src/infrastructure/cdk.out
            artifacts/
          key: deploy-dev-${{ needs.pre-deploy.outputs.commit-sha }}

  deploy-infrastructure:
    name: Deploy Infrastructure (CDK)
    runs-on: ubuntu-latest
    needs: [pre-deploy, build-and-test]
    if: always() && needs.pre-deploy.outputs.should-deploy == 'true' && needs.build-and-test.result == 'success'
    environment:
      name: dev-infrastructure
      url: https://dev.aws-community-hub.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            src/backend/dist
            src/frontend/.next
            src/infrastructure/cdk.out
            artifacts/
          key: deploy-dev-${{ needs.pre-deploy.outputs.commit-sha }}

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy infrastructure with CDK
        run: |
          cd src/infrastructure
          npm run build
          npx cdk deploy --all --require-approval never --outputs-file outputs.json
        env:
          CDK_DEPLOY_ACCOUNT: ${{ secrets.DEV_AWS_ACCOUNT_ID }}
          CDK_DEPLOY_REGION: ${{ env.AWS_REGION }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}

      - name: Save CDK outputs
        run: |
          cd src/infrastructure
          if [ -f outputs.json ]; then
            cat outputs.json
            # Upload outputs to S3 for application deployment
            aws s3 cp outputs.json s3://${{ env.S3_BUCKET }}/configs/dev/cdk-outputs.json
          fi

  deploy-applications:
    name: Deploy Applications
    runs-on: ubuntu-latest
    needs: [pre-deploy, build-and-test, deploy-infrastructure]
    if: always() && needs.pre-deploy.outputs.should-deploy == 'true' && needs.deploy-infrastructure.result == 'success'
    environment:
      name: dev
      url: https://dev.aws-community-hub.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            src/backend/dist
            src/frontend/.next
            src/infrastructure/cdk.out
            artifacts/
          key: deploy-dev-${{ needs.pre-deploy.outputs.commit-sha }}

      - name: Get CDK outputs
        run: |
          aws s3 cp s3://${{ env.S3_BUCKET }}/configs/dev/cdk-outputs.json cdk-outputs.json
          cat cdk-outputs.json

      - name: Deploy using deployment script
        run: |
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh dev ${{ needs.pre-deploy.outputs.commit-sha }}
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          S3_ARTIFACTS_BUCKET: ${{ env.S3_BUCKET }}

      - name: Run smoke tests
        run: |
          # Get the application URL from CDK outputs
          APP_URL=$(jq -r '.["aws-community-hub-dev"].AppUrl' cdk-outputs.json)
          echo "Testing deployment at: $APP_URL"
          
          # Wait for deployment to be ready
          sleep 30
          
          # Basic health check
          curl -f "$APP_URL/health" || exit 1
          echo "✅ Deployment health check passed"

  notify-deployment:
    name: Deployment Notifications
    runs-on: ubuntu-latest
    needs: [pre-deploy, build-and-test, deploy-infrastructure, deploy-applications]
    if: always() && needs.pre-deploy.outputs.should-deploy == 'true'
    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [[ "${{ needs.deploy-applications.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Deployment to dev environment successful" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Deployment to dev environment failed" >> $GITHUB_OUTPUT
          fi

      - name: Update GitHub deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentId = ${{ needs.pre-deploy.outputs.deployment-id || 0 }};
            if (deploymentId) {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deploymentId,
                state: '${{ steps.status.outputs.status }}',
                description: '${{ steps.status.outputs.message }}',
                environment_url: 'https://dev.aws-community-hub.com'
              });
            }

      - name: Notify Slack (if configured)
        if: env.SLACK_WEBHOOK_URL != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"${{ steps.status.outputs.message }} - Commit: ${{ needs.pre-deploy.outputs.commit-sha }}"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub release (on success)
        if: steps.status.outputs.status == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              per_page: 10
            });
            
            const releaseNotes = commits.map(commit => 
              `- ${commit.commit.message.split('\n')[0]} (${commit.sha.substring(0, 7)})`
            ).join('\n');
            
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `dev-${new Date().toISOString().split('T')[0]}-${{ needs.pre-deploy.outputs.commit-sha }}`.substring(0, 50),
              name: `Dev Release - ${new Date().toISOString().split('T')[0]}`,
              body: `🚀 **Deployed to Development Environment**\n\n**Changes:**\n${releaseNotes}\n\n**Environment:** https://dev.aws-community-hub.com\n**Commit:** ${{ needs.pre-deploy.outputs.commit-sha }}`,
              draft: false,
              prerelease: true
            });